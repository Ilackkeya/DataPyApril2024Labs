{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47bf5050-5942-454c-ac4f-7c1b187e34a1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello! \n",
      "Welcome to GC Bikes & Trucks!\n"
     ]
    }
   ],
   "source": [
    "# Car_Dealership\n",
    "#Parent class\n",
    "class Vehicle:\n",
    "    def __init__(self, make, miles, price):\n",
    "        self.make = make\n",
    "        self.miles = miles\n",
    "        self.price = price\n",
    "        self.engine_on = False\n",
    "    def start_engine(self):\n",
    "        print(\"Starting engine...\")\n",
    "        self.engine_on == True\n",
    "    def make_noise(self):\n",
    "        print(\"Beep beep!\")\n",
    "        \n",
    "#Derived Classes\n",
    "class Truck(Vehicle):\n",
    "    def __init__(self, make, miles, price):\n",
    "        self.make = make\n",
    "        self.miles = miles\n",
    "        self.price = price\n",
    "        self.cargo = False\n",
    "    def load_cargo(self):\n",
    "        print(\"Loading the truck bed....\")\n",
    "        self.cargo = True\n",
    "    def __str__(self):\n",
    "        return f\"{self.make} - with {self.miles} miles costs ${self.price}\"\n",
    "        \n",
    "class Motorcycle(Vehicle):\n",
    "    def __init__(self, make, miles, price, top_speed):\n",
    "        self.make = make\n",
    "        self.miles = miles\n",
    "        self.price = price\n",
    "        self.top_speed = top_speed\n",
    "    def top_speed(self):\n",
    "        self.top_speed = top_speed\n",
    "    def make_noise(self):\n",
    "        print(\"Vroom Vroom!\")\n",
    "    def __str__(self):\n",
    "         return f\"{self.make} - with {self.miles} miles and a top speed of {self.top_speed} costs ${self.price}\"\n",
    "\n",
    "\n",
    "vehicles_to_compare =[]\n",
    "#Defining function to list vehicles info\n",
    "def options(v):\n",
    "    #Creating bike list \n",
    "    Harley = Motorcycle(\"Harley\", 100, 60000, 300)\n",
    "    BMW = Motorcycle(\"BMW\", 600, 50000, 250)\n",
    "    Ducati = Motorcycle(\"Ducati\", 1000, 40000, 280)\n",
    "        \n",
    "    bikes = [Harley, BMW, Ducati]\n",
    "\n",
    "    #Creating turck list\n",
    "    Ram = Truck(\"Ram\", 10000, 60000)\n",
    "    Jeep = Truck(\"Jeep\", 20000, 40000)\n",
    "    Toyota = Truck(\"Toyota\", 15000, 38000)\n",
    "    \n",
    "    trucks = [Ram, Jeep, Toyota]\n",
    "\n",
    "    # validating the entry and printing the list of vehicle as per user's selection\n",
    "    if v == 'b':\n",
    "        j=1\n",
    "        for i in bikes:\n",
    "            print(f\"{j}) {i}\")\n",
    "            j+=1\n",
    "        compare(bikes) \n",
    "    elif v == 't':\n",
    "        j=1\n",
    "        for i in trucks:\n",
    "            print(f\"{j}) {i}\")\n",
    "            j+=1\n",
    "        compare(trucks)\n",
    "    else:\n",
    "        choice = input(\"Please re-check and enter the correct choice (b or t): \\n\")\n",
    "        choices (choice)\n",
    "    \n",
    "#defining compare function to create a comparison of list of vehicles   \n",
    "def compare(list):\n",
    "    \n",
    "    response = input(\"Would you like to compare one of these vehicles today? (y or n) \\n\")\n",
    "    #validating the response input\n",
    "    if response != 'y' and response !='n':\n",
    "        print(\"Please enter 'y' or 'n' only\")\n",
    "        response = input(\"Would you like to compare one of these vehicles today? (y or n) \\n\")\n",
    "    #if yes proceed for comparison\n",
    "    while response == 'y':\n",
    "        list_n = int(input(\"Which vehicle would you like to compare? (please list number) \\n\"))\n",
    "        for i in range(len(list)):\n",
    "            if (list_n-1) == i:\n",
    "                vehicles_to_compare.append(list[i])\n",
    "                print(f\"{list[i].make} added!\")\n",
    "        response = input(\"Would you like to compare with other remaining vehicles in this list? (y or n) \\n\")\n",
    "        \n",
    "    #if no, continue search or show the comparison list\n",
    "    veh_compare = input(\"Would you like to go ahead and view the comparison of selected vehicles? \\n\")\n",
    "    if veh_compare =='y':\n",
    "        print(\"Here are your vehicles to compare:\")\n",
    "        for i in vehicles_to_compare:\n",
    "            print(i)\n",
    "            i.make_noise()\n",
    "        print(\"Thank you and Have a nice day!\") \n",
    "    \n",
    "    else:\n",
    "        choice = input(\"Would you like to view bikes or trucks? (b or t) \\n\")\n",
    "        options(choice)\n",
    "        \n",
    "#Welcoming the user\n",
    "print(\"Hello! \\nWelcome to GC Bikes & Trucks!\")\n",
    "#getting user choice of vehicle\n",
    "choice = input(\"Would you like to view bikes or trucks? (b or t) \\n\")\n",
    "options(choice) #calling function to list the vehicles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0afc666a-4923-4eba-bd43-3ed2aeb01114",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
